Setting Up

  After installing Saturn, you can use the interpreter on your source files
  in two different ways, as per usual. You can enter

      saturn sourcefile.sat

  to run sorucefile.sat, or you can include a shebang and path to the
  interpreter. By default, this is set to /usr/bin, so you may add the line

      #!/usr/bin/saturn

  to the beginning of your source file, and then execute the program with

      ./sourcefile.sat

Basics

 Syntax

  Every line in Saturn consists of one of two structures:

      <keyword> <destination>
      ; or
      <keyword> <destination>, <source>

  A comma must follow the destination if a source is provided. Depending
  on what command is used, the source is in some way 'applied' to the
  destination.

 Comments

  Only single-line comments are supported; they begin with the semicolon
  character ';' and end at a newline.

      ; Read in a number, double it, then print the original
      ; and the number doubled
      int orig
      int dbl
      rin orig, stdin     ; Read in from stdin an integer into orig
      mov dbl, orig       ; Copy orig into dbl
      mul dbl, 2          ; Do the doubling
      out stdout, orig    ; Output
      out stdout, newline
      out stdout, dbl

 Declarations

  To declare a variable, you specify the type and label, and optionally,
  an initial value:

      int baz                   ; Declares an integer
      flt foo, 10.21            ; Initialize float foo to 10.21
      str bar, 'Hello'          ; Initialize string bar to 'Hello'

 Assignment, and More

  Declared variables can be manipulataed with some instructions:

      mov foo, 0.6              ; Assigns the value 0.6 to foo
      mov bar, 'Saturn'         ; Assigns the value 'Saturn' to bar
      mov baz, 10               ; Assigns the value 10 to baz

      add foo, 10               ; Add 10 to foo
      cat bar, 'v0.1'           ; Concatenate 'v0.1' to 'Saturn
      add baz, 2                ; Add 2 to baz

  The commands 'sub', 'mul', and 'div' can be used just as 'add', to subtract,
  multiply, and divide. Also, there are two commands 'inc' and 'dec', for
  increment and decrement:

      inc foo                   ; Adds 1 to foo, same as 'add foo, 1'
      dec foo                   ; Subtracts 1 from foo, same as 'sub foo, 1'

  With the 'cat' keyword, you can concatenate one string onto another:

      str one, 'one...'
      str two, 'two...'
      cat one, two
      cat one, 'three!'         ; one is now 'one...two...three!'

 Input and Output

  The two keywords 'rin' for 'read input' and 'out' for 'output' are used for
  interacting with file streams. stdin, stdout, and stderr are provided, and
  can be used like so;

      str input
      rin input, stdin
      out stdout, input

   The two keywords 'rin' and 'out' can be used with variables of any type im
   the same exact way:

       int num1
       flt num2
       str string
       rin num1, stdin
       rin num2, stdin
       rin string, stdin

Pre-Release Woes

 As Saturn is still in it's very early stages of development, some features
 that you would expect in any progrmming language are not yet available.
  
  The most troublesome in this version is the inability to include whitespace
  in strings. This is due to how the interpreter parses syntax. This lack of
  a necessary feature is being worked on at this time.
  
  Another feature missing is the ability to concatenate ints and flts to
  strings. This will be added very shortly.

  The behemoth of a feature that is control structures is also not yet
  implemented, but is also the next step for Saturn, and will be top priority
  upon the inclusion of the previously mentioned missing features.
