Setting Up
 
 From a file

  After installing Saturn, you can use the interpreter on your source files
  in two different ways, as per usual. You can enter

      saturn sourcefile.sat

  to run sorucefile.sat, or you can include a shebang and path to the
  interpreter. By default, this is set to /usr/bin, so you may add the line

      #!/usr/bin/saturn

  to the beginning of your source file, and then execute the program with

      ./sourcefile.sat

Basics

 main
  
  Every Saturn program must have a main label. This label indicates where
  execution will begin. It does not have to be at the beginning of the file,
  but it must be included. See the following program:

      int a, 10
      add a, 7

      main:
          out stdout, a

  This program will not run, because the only line actually executed is
  `out stdout, a'. However, `a' has not been declared, because the first
  two lines in the file were never executed.

 ending a program

  Every Saturn program ends when the control flow reaches the end of the file.
  This will by default return 0 to the operating system. However, you can exit
  out of a program from anywhere with the use of 'ext'. 'ext' stands for 'exit',
  as seen here:

      main:
	      int a, 10
		  out stdout, 'Hello, world!'
		  ext 1
		  add a, 5
  
  This program will return 1 to the operating system, indicating an error.
  The line 'add a, 5' will never execute, as the program will end on the line
  before it, 'ext 1'.

 Syntax

  Every line in Saturn consists of one of two structures:

      <keyword> <destination>
      ; or
      <keyword> <destination>, <source>

  A comma must follow the destination if a source is provided. Depending
  on what command is used, the source is in some way 'applied' to the
  destination.

 Comments

  Only single-line comments are supported; they begin with the semicolon
  character ';' and end at a newline.

      ; Read in a number, double it, then print the original
      ; and the number doubled
      int orig
      int dbl
      get orig, stdin           ; Read into orig an integer from stdin
      mov dbl, orig             ; Copy orig into dbl
      mul dbl, 2                ; Double the number
      out stdout, orig          ; Output
      out stdout, newline
      out stdout, dbl

 Declarations

  To declare a variable, you specify the type and label, and optionally,
  an initial value:

      int baz                   ; Declares an integer
      flt foo, 10.21            ; Initialize float foo to 10.21
      str bar, 'Hello'          ; Initialize string bar to 'Hello'

 Assignment, and More

  Declared variables can be manipulataed with some instructions:

      mov foo, 0.6              ; Assigns the value 0.6 to foo
      mov bar, 'Saturn'         ; Assigns the value 'Saturn' to bar
      mov baz, 10               ; Assigns the value 10 to baz

      add foo, 10               ; Add 10 to foo
      cat bar, ' v1.1'          ; Concatenate ' v1.1' to 'Saturn'
      len baz, bar              ; Assigns the length of string bar to baz

  The commands 'sub', 'mul', and 'div' can be used just as 'add', to subtract,
  multiply, and divide integers and floats. The 'mod' command can be used only
  on integers, assigning the modulus of the two arguments to the first:
  
      int a, 10
      mod a, 3                  ; a is now 10 % 3, or 1
  
  Also, there are two commands 'inc' and 'dec', for
  increment and decrement:

      inc foo                   ; Adds 1 to foo, same as 'add foo, 1'
      dec foo                   ; Subtracts 1 from foo, same as 'sub foo, 1'

  With the 'cat' keyword, you can concatenate one string onto another:

      str one, 'one...'
      str two, 'two...'
      cat one, two
      cat one, 'three!'         ; one is now 'one...two...three!'

 Input and Output

  The two keywords 'rin' for 'read input' and 'out' for 'output' are used for
  interacting with file streams. stdin, stdout, and stderr are provided, and
  can be used like so;

      str input
      get input, stdin
      out stdout, input

   The two keywords 'rin' and 'out' can be used with variables of any type im
   the same exact way:

      int num1
      flt num2
      str string
      get num1, stdin
      get num2, stdin
      get string, stdin

 File IO

  The two keywords 'fil' and 'opn' are used for dealing with user-declared files.
  'fil' declares a file variable, which is used for input and output.
  However, the file must first be opened for input and output. This is done
  using the 'opn' keyword. The 'opn' keyword takes as its second argument the
  mode for how the file wll be handled: 'r' for read, 'w' for write, 'b' for
  binary IO, and 'a' for appending:

      int a
      fil input, 'input.txt'
      fil output, 'output.txt'
      opn input, 'r'            ; open the input.txt file for reading
      opn output, 'w'           ; open the output.txt file for writing
      get a, input
      out output, a

  This snippet will open input.txt and read an integer from it, then print it
  to output.txt. When finished reading and writing to and from a file, it is
  wise to close the file. This is done using the 'cls' keyword:

      cls input
      cls output

  This will ensure the data will be written and cut off access to the file.
  A closed file can always be opened again.

 Labels

  A label can be created with an unbroken name followed by a colon and newline.
  Labels can then be jumped to using the 'jmp' keyword:

      int a, 10
      out stdout, a
      jmp add5
      sub a, 5
      add5:
      add a, 5
      out stdout, a
  
  Here, the program executes as such: declare 'a' as an integer of 10, print
  it, add 5 to a, then print it. It never subtracts 5 from a, because it was
  skipped by the 'jmp add5' line, which moved the flow to the 'add5:' label.
  Typically, programs have labels for each of their sections for
  organization.

      get_input:
          int a
          out stdout, 'Enter an integer: '
          get a, stdin
          jmp input_got

      print_out:
          out output, 'The number entered: '
          out output, a
          out output, newline
          jmp print_done

      main:
          fil output, 'data.txt'
          opn output, 'w'
          jmp get_input
          input_got:
          jmp print_out
          print_done:
          cls output
          jmp end
     
      end:
          out stdout, 'Done!'
          out stdout, newline

  It is common for programs with jumps and labels to have an 'end' label. If
  this example did not have 'jmp end' and the 'end' label, then all of the
  code, from 'int a', the first line of get_input, to 'jmp print', the last
  line of print_out, would be executed more than once. In fact, this program
  would enter an endless loop! This is because code after a label is not
  ignored if it's not jumped to. So, when using jumps and labels, it is always
  a good idea to have an 'end' label.

 Control Flow

  Jumps can be used to move the program flow from one place to another.
  Conditional jumps are jumps that are only executed if a condition is
  true. This condition is set by the 'cmp' keyword, which compares two
  values.

      int a
      int b
      get a, stdin
      get b, stdin
      cmp a, b

  Here, 'cmp a, b' compares the values of a and b. 'cmp' can be used with two
  numeric values, or two string values. 'cmp' changes the value of what's
  referred to as the status word. The status word indicates that most recent
  result of 'cmp'. Using the status word, we can decide if the program should
  jump to different labels, using conditional jumps.

      int num1, 2
      int num2, 5
      cmp num1, num2
      jeq equal
      
  The flow of this program will jump to the label 'equal' if num1 and num2 are
  equal. Since 2 and 5 are not equal, the jump to 'equal' is not executed.
  There are many types of conditional jumps, one for each result of 'cmp'.
  They are are listed in the keywords.txt file.
